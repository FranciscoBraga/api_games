// <auto-generated />
using System;
using GamesFree.Repositoy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamesFree.Repositoy.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GamesFree.Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DateActive");

                    b.Property<string>("Name");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GamesFree.Domain.GameTypeGame", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("TypeGameId");

                    b.HasKey("GameId", "TypeGameId");

                    b.HasIndex("TypeGameId");

                    b.ToTable("GameTypeGames");
                });

            modelBuilder.Entity("GamesFree.Domain.GameUser", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("UserId");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUsers");
                });

            modelBuilder.Entity("GamesFree.Domain.ImageGame", b =>
                {
                    b.Property<int>("ImageGameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId");

                    b.Property<string>("Path");

                    b.HasKey("ImageGameId");

                    b.HasIndex("GameId");

                    b.ToTable("ImageGames");
                });

            modelBuilder.Entity("GamesFree.Domain.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("GamesFree.Domain.TypeGame", b =>
                {
                    b.Property<int>("TypeGameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("TypeGameId");

                    b.ToTable("TypeGames");
                });

            modelBuilder.Entity("GamesFree.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUser");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Subscriptid");

                    b.Property<bool>("term");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GamesFree.Domain.GameTypeGame", b =>
                {
                    b.HasOne("GamesFree.Domain.Game", "Game")
                        .WithMany("GameTypeGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GamesFree.Domain.TypeGame", "TypeGame")
                        .WithMany("GameTypeGames")
                        .HasForeignKey("TypeGameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GamesFree.Domain.GameUser", b =>
                {
                    b.HasOne("GamesFree.Domain.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GamesFree.Domain.User", "User")
                        .WithMany("GameUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GamesFree.Domain.ImageGame", b =>
                {
                    b.HasOne("GamesFree.Domain.Game", "Game")
                        .WithMany("ImageGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GamesFree.Domain.SocialNetwork", b =>
                {
                    b.HasOne("GamesFree.Domain.Game", "Game")
                        .WithMany("SocialNetwork")
                        .HasForeignKey("GameId");

                    b.HasOne("GamesFree.Domain.User", "User")
                        .WithMany("SocialNetwork")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
